//TODO: obscure auth system, need backend!
import { useState, useRef, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { Helmet } from "react-helmet-async";
import MainLayout from "../../Layouts/MainLayout";
import Alert from "../../shared/components/UIElements/Alert";
import { useAlert } from "../../shared/context/AlertContext";
import Captcha from "../../shared/util/Captcha";
import { AuthContext } from "../../shared/context/AuthContext";

function Auth() {
  const { showAlert, alert } = useAlert();
  const { login } = useContext(AuthContext);
  const captchaRef = useRef();
  const [captchaValid, setCaptchaValid] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  function handleSubmit(event) {
    event.preventDefault();

    if (!captchaValid) {
      return showAlert(
        "Please complete the captcha before submitting",
        "error",
      );
    }

    const user = login(email, password);

    if (user) {
      console.log("Login Successful", user);
      navigate(`/panel/${user.id}`); //TODO: need uid generated by backend
    } else {
      console.log("Login Failed!", user);
      showAlert("Invalid email or password, Please try again.", "error");
    }
  }

  return (
    <>
      <Helmet>
        <title>Auth - Night Eye</title>
      </Helmet>
      <MainLayout>
        <div className="flex flex-col items-center justify-center min-h-screen">
          <fieldset className="fieldset bg-base-200 border-base-100 rounded-box w-xs border p-4">
            {alert && <Alert {...alert} />}
            <form onSubmit={handleSubmit}>
              <legend className="fieldset-legend">Login</legend>

              <label className="label">Email</label>
              <input
                type="email"
                className="input validator"
                placeholder="Email"
                value={email}
                required
                onChange={(e) => setEmail(e.target.value)}
              />
              <div className="validator-hint">Please enter a valid email</div>

              <label className="label">Password</label>
              <input
                type="password"
                className="input"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />

              <div className="mt-4">
                <Captcha onValidate={setCaptchaValid} ref={captchaRef} />
              </div>

              <button className="btn btn-neutral mt-4" type="submit">
                Login
              </button>
            </form>
          </fieldset>
        </div>
      </MainLayout>
    </>
  );
}

export default Auth;
